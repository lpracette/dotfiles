# vi: ft=sh

# from https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
#    ESC[ … 38;5;<n> … m Select foreground color
#    ESC[ … 48;5;<n> … m Select background color
#    0x00-0x07:  standard colors (as in ESC [ 30–37 m)
#    0x08-0x0F:  high intensity colors (as in ESC [ 90–97 m)
#    0x10-0xE7:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)
#    0xE8-0xFF:  grayscale from black to white in 24 steps
function term-256-color-test()
{
    for fgbg in 38 48 ; do #Foreground/Background
        echo "Standard colors"
        for ((color=0; color<8; color++)); do
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
        done
        echo #New line
        echo #New line
        echo "High-intensity colors"
        for ((color=8; color<16; color++)); do
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
        done
        echo #New line
        echo #New line
        for ((color=16; color<232; color++)); do
            #Display the color
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
            #Display 36 colors per lines
            if [ $((($color - 15) % 36)) = 0 ] ; then
                echo #New line
            fi
        done
        echo #New line
        echo "Grayscale colors"
        for ((color=232; color<256; color++)); do
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
        done
        echo #New line
        echo #New line
    done
}

function term-truecolor-test()
{
    printf "\x1b[38;2;255;100;0mTRUECOLOR\x1b[0m\n"
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}
function countdown(){
    date1=$((`date +%s` + $1)); 
    while [ "$date1" -ge `date +%s` ]; do 
        echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
        sleep 0.1
    done
    notify-send "Countdown Done $1 seconds elapsed" "$2"
    if [[ $(echo "$(tmux -V | sed -En 's/^tmux[^0-9]*([.0-9]+).*/\1/p') >= 3.2" | bc) == 1 ]]; then
        tmux display-popup echo "Countdown Done $1 seconds elapsed$2"
    fi
}
function stopwatch(){
    date1=`date +%s`; 
    while true; do 
        echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"; 
        sleep 0.1
    done
}

# install spell to get /usr/share/dict/words
function randomWord() {
    shuf -n${1:-3} /usr/share/dict/words | sed "s/'//" | sed "s/.*/\u&/" | paste -s -d '' -
}

function randomWordSpace() {
    shuf -n${1:-3} /usr/share/dict/words | sed "s/'//" | sed "s/.*/\u&/" | paste -s -d ' ' -
}

function wttr() {
    if [ -z "$1" ]; then
        curl -s 'http://wttr.in/Montreal?mpq&lang=fr' | head -n 38 
    else
        if [[ "$1" == "-h" || "$1" == "--help" ]]; then
            curl -s http://wttr.in/:help
        else
            curl -s "http://wttr.in/$1?pqm&lang=fr" | head -n 38 
        fi
    fi

}

function what() {
    ps --no-headers -eo tty,uname,pcpu,pmem,comm | awk '$1 != "?"{arr[$2]+=$4;arr2[$2]+=$3}; END {print "USER MEM %CPU"; for (i in arr) {print i,arr[i],arr2[i]|"sort -rnk3"}}'  | column -t
}

function checksum() {
    bash -c "echo \"echo \"`md5sum $1`\" | md5sum -c\"  | tmux loadb -"
}

function vimp() {
    bash <(curl -sfL https://raw.githubusercontent.com/junegunn/myvim/master/myvim)
}

function git-cp {
    PATCH_DIR="$HOME/backup/patch/$(basename $(pwd))_$(date +'%Y_%m_%d_%H_%M_%S')/"
    mkdir -p PATCH_DIR
    echo "Backing up to $PATCH_DIR..."
    
    # Local commits
    git format-patch -p `git rev-parse --abbrev-ref --symbolic-full-name @{u}` -o $PATCH_DIR
    git submodule --quiet foreach --recursive "git format-patch -p \$(git rev-parse --abbrev-ref --symbolic-full-name @{u}) -o $PATCH_DIR"
    
    # Work in Progress
    if ! git diff --exit-code  --ignore-submodules --quiet; then
        git diff --ignore-submodules > $PATCH_DIR/wip_$(basename `git rev-parse --show-toplevel`)_$(date +"%Y_%m_%d_%H_%M_%S").patch
    fi
    git submodule --quiet foreach --recursive \
    "if ! git diff --exit-code  --ignore-submodules --quiet; then \
        git diff --ignore-submodules --src-prefix=\"a/\${path}/\" --dst-prefix=\"b/\${path}/\" >\
        $PATCH_DIR/wip_\$(basename \$path)_$(date +\"%Y_%m_%d_%H_%M_%S\").patch; \
     fi"
}

function svn-cp() {
    PATCH_DIR=$(pwd)/${1:-tmp_patch}

    # SVN repos
    pushd $PATCH_DIR
    find `git rev-parse --show-toplevel 2>/dev/null` -type d -name ".svn" -exec bash -c 'svn st `dirname {}` | grep -q ^[ADM] && svn di --internal-diff `dirname {}` > wip_$(dirname {}|tr "/" "-" | cut -c 2-)_$(date +%Y_%m_%d_%H_%M_%S).patch' \;
    popd
}

function time_all() {
    echo "Plano:       $(TZ=":America/Chicago" date)"
    echo "Montreal:    $(TZ=":America/Montreal" date)"
    echo "London:      $(TZ=":Europe/London" date)"
    echo "Istanbul:    $(TZ=":Asia/Istanbul" date)"
    echo "Bangalore:   $(TZ=":Asia/Kolkata" date)"
    echo "Ho Chi Minh: $(TZ=":Asia/Ho_Chi_Minh" date)"
}

function aqlSearch() {
    curl -u $USER -sfX POST -H 'content-type: text/plain' https://rcplc7artent.genband.com/artifactory/api/search/aql --data $1
}
#        jq  -r '.results | sort_by(.created) | .[] | .repo + "/" + .path + "/" + .name'

function openapi_generator_cli() {
    docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli $@
}

# from https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/bin/scripts/test-fonts.sh
function print-decimal-unicode-range() {
  local originalSequence=("$@")
  local counter=0
  # Use alternating colors to see which symbols extend out of the bounding
  # box.
  local bgColorBorder='\033[48;5;8m'
  local bgColorCode='\033[48;5;246m'
  local alternateBgColorCode='\033[48;5;240m'
  local bgColorChar='\033[48;5;66m'
  local alternateBgColorChar='\033[48;5;60m'
  local underline='\033[4m'
  local currentColorCode="${bgColorCode}"
  local currentColorChar="${bgColorChar}"
  local reset_color='\033[0m'
  local allChars=""
  local allCodes=""
  local wrapAt=5
  local topLine="${bgColorBorder}╔══════╦══════╦══════╦══════╦══════╗${reset_color}"
  local bottomLine="${bgColorBorder}╚══════╩══════╩══════╩══════╩══════╝${reset_color}"
  local line="${bgColorBorder}╠══════╬══════╬══════╬══════╬══════╣${reset_color}"
  local bar="${bgColorBorder}║${reset_color}"
  local originalSequenceLength=${#originalSequence[@]}
  local leftoverSpaces=$((wrapAt - (originalSequenceLength % wrapAt)))

  # add fillers to array to maintain table:
  if [[ "$leftoverSpaces" < "$wrapAt" ]]; then
    # shellcheck disable=SC2034
    # needs rework without 'i' var?
    for i in $(seq 1 $leftoverSpaces); do
      originalSequence+=(0)
    done
  fi

  local sequenceLength=${#originalSequence[@]}

  printf "%b\\n" "$topLine"

  for decimalCode in "${originalSequence[@]}"; do
    local hexCode
    hexCode=$(printf '%x' "${decimalCode}")
    local code="${hexCode}"
    local char="\\u${hexCode}"

    # fill in placeholder cells properly formatted:
    if [ "${char}" = "\\u0" ]; then
      char=" "
      code="    "
    fi

    allCodes+="${currentColorCode} ${underline}${code}${reset_color}${currentColorCode} ${reset_color}$bar"
    allChars+="${currentColorChar}  ${char}   ${reset_color}$bar"
    counter=$((counter + 1))
    count=$(( (count + 1) % wrapAt))

    if [[ $count -eq 0 ]]; then

      if [[ "${currentColorCode}" = "${alternateBgColorCode}" ]]; then
        currentColorCode="${bgColorCode}"
        currentColorChar="${bgColorChar}"
      else
        currentColorCode="${alternateBgColorCode}"
        currentColorChar="${alternateBgColorChar}"
      fi

      printf "%b%b%b" "$bar" "$allCodes" "$reset_color"
      printf "\\n"
      printf "%b%b%b" "$bar" "$allChars" "$reset_color"
      printf "\\n"

      if [ "$counter" != "$sequenceLength" ]; then
        printf "%b\\n" "$line"
      fi

      allCodes=""
      allChars=""
    fi

  done

  printf "%b\\n" "$bottomLine"

}
function print-unicode-ranges() {
  echo ''

  local arr=("$@")
  local len=$#
  local combinedRanges=()

  for ((j=0; j<len; j+=2)); do
    local start="${arr[$j]}"
    local end="${arr[(($j+1))]}"
    local startDecimal=$((16#$start))
    local endDecimal=$((16#$end))

    mapfile -t combinedRanges < <(seq "$startDecimal" "$endDecimal")

  done

  print-decimal-unicode-range "${combinedRanges[@]}"

}

function term-powerline-font-test() {
  echo "Nerd Fonts - Powerline"
  print-unicode-ranges e0a0 e0a2 e0b0 e0b3
  echo; echo

  echo "Nerd Fonts - Powerline Extra"
  print-unicode-ranges e0a3 e0a3 e0b4 e0c8 e0cc e0d2 e0d4 e0d4
  echo; echo
}

function man() { 
    if [ $# -eq 0 ]; then
        /usr/bin/man
    elif whatis $* ; then
        vim -c 'filetype plugin on' -c 'set ft=man nomod nolist' -c "Man $*";
    fi
}

function lint_jenkinsfile() {
    if [ -z "$JENKINS_URL" ]; then
        echo "Please define JENKINS_URL"
    else
        local JENKINSFILE=${1:-Jenkinsfile}
        local JENKINS_CRUMB=`curl -s "$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)"`
        curl -X POST -H $JENKINS_CRUMB -F "jenkinsfile=<$JENKINSFILE" $JENKINS_URL/pipeline-model-converter/validate
    fi
}

# from https://stackoverflow.com/a/23002317
function abspath() {
    # generate absolute path from relative path
    # $1     : relative filename
    # return : absolute path
    if [ -d "$1" ]; then
        # dirkl
        (cd "$1"; pwd)
    elif [ -f "$1" ]; then
        # file
        if [[ $1 = /* ]]; then
            echo "$1"
        elif [[ $1 == */* ]]; then
            echo "$(cd "${1%/*}"; pwd)/${1##*/}"
        else
            echo "$(pwd)/$1"
        fi
    fi
}

function toggle_dark_mode() {
    if [[ "$(osascript -e 'tell app "System Events" to tell appearance preferences to return dark mode')" == "true" ]]; then
        osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to false'
        bash -ci 'base16_atelier-plateau-light'
    else
        osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to true'
        bash -ci 'base16_atelier-plateau'
    fi


}

function jira() {

    jql='assignee=currentUser() and resolution=Unresolved ORDER BY updatedDate'
    jql=$(echo "$jql" | jq -sRr @uri)
    tmpfile=$(mktemp)
    COLOR='\u001b[1;34m'
    C_END='\u001b[0m'
    preview="cat tmpfile | jq -r --arg KEY \$(echo {} | cut -d ' ' -f 1) '.issues[] | select(.key == \$KEY) | \
        \"\\u001b[30;104m\" +.key + \" - \"     + .fields.summary + \"$C_END\n\" + \
        \"\n\"+ \"${COLOR}Created at$C_END: \"  + .fields.created + 
        \"\n\"+ \"${COLOR}Updated at$C_END: \"  + .fields.updated + 
        \"\n\"+ \"${COLOR}Due date$C_END: \"    + .fields.duedate + 
        \"\n\"+ \"${COLOR}Reported by$C_END: \" + .fields.reporter.displayName + 
        \"\n\"+ \"${COLOR}Status$C_END: \"      + .fields.status.name + 
        \"\n${COLOR}Description$C_END:\n\" + .fields.description '"
    curl -su $JIRA_USER:$JIRA_PASS "$JIRA_URL/rest/api/2/search?jql=$jql" -o tmpfile
    cat tmpfile | jq -r '.issues[] | .key + " - " + .fields.summary' | fzf --ansi --preview "$preview" | cut -d ' ' -f 1
    rm tmpfile
}

function jiraBrowse() {
    case "$(uname)" in
        (*Linux*) open='xdg-open' ;;
        (*Darwin*) open='open' ;;
        (*) echo 'Error: open command is undefined'; return 1
    esac
    ${open} "${JIRA_URL}/browse/$(jira)"
}
